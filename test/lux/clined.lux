[doc Testing DrNED-XMNR integration with NCS and DrNED; CLI device interaction]

[include common.luxinc]

[shell os]
    !readlink -f cfgs/device/*.py
    ?(.*/)(netsim_I.py)
    [global driverpath=$1]
    [global driver=${1}${2}]
    [global broken=${1}broken.py]
    [invoke ned-test-setup]
    !ls -d $NCS_DIR/packages/neds/*-ios-cli* | tail -1
    ?(cisco-ios.*)
    !cp -r $NCS_DIR/packages/neds/$1 cisco-ios
    [invoke shell-check]
    [timeout 30]
    !make -C cisco-ios/src all
    [invoke shell-check]
    [timeout]
    !cd ..
    [invoke start-ncs-netsim cisco-ios]

[shell ncs-cli]
    [invoke prepare-test cisco-ios0]
    !top show full devices device cisco-ios0 config ios:ip
    !config ios:interface GigabitEthernet 2 ip address 10.10.10.10 255.255.255.0
    !commit
    ???Commit complete.
    # watch for autoconfigs
    !sync-from
    ?result true
    !drned-xmnr state record-state state-name if overwrite true
    ???success
    [progress walk states]
    [invoke test-walk-states "empty if"]
    # clean up
    [timeout 10]
    !drned-xmnr transitions transition-to-state state-name empty
    ?success
    [timeout]
    [progress convert CLI config]
[shell os]
    !ncs-netsim add-to-network packages/cisco-ios 1 cisco-nc
    [invoke shell-check]
    !ncs-netsim start cisco-nc0
    [invoke shell-check]
[shell ncs-cli]
    [local tweak=sed -e 's/10023/12023/' -e 's/cli>/netconf>/']
    [invoke prepare-ncs-tweak cisco-nc0 $tweak cisco-nc0]
    !drned-xmnr driver $driver
    !commit
    !drned-xmnr setup setup-xmnr overwrite true
    ???success
    [progress import configs]
    !drned-xmnr state import-convert-cli-files file-path-pattern ../cfgs/
    ???failure no files found: ../cfgs/
    [timeout 30]
    -failure
    !drned-xmnr state import-convert-cli-files file-path-pattern ../cfgs/*rad*.cfg
    ???success Imported states: rad1, rad2, short-rad1:1, short-rad1:2, short-rad1:3, short-rad2:1, short-rad2:2
    [timeout]
[shell os]
    [local states_dir=$xmnr_dir/cisco-nc0/test/states]
    !diff $states_dir/rad1.state.xml $states_dir/short-rad1:3.state.xml
    [invoke shell-check]
    !diff $states_dir/rad2.state.xml $states_dir/short-rad2:2.state.xml
    [invoke shell-check]
    ~xmlstarlet sel -N ios=urn:ios -t -m '//ios:group/ios:server' -c . -n $states_dir/rad1.state.xml
    !| xmllint --format -
    """?
    <?xml version=.*?>
    <server xmlns=.*>
     *<radius>
     *<name>rad2</name>
     *</radius>
    </server>
    SH-PROMPT:
    """
    ~xmlstarlet sel -N ios=urn:ios -t -m '//ios:radius[ios:server]' -c . -n $states_dir/rad1.state.xml
    !| xmllint --format -
    """?
    <?xml version=.*?>
    <radius xmlns="urn:ios">
     *<server>
     *<id>rad1</id>
     *<address>
     *<ipv4>
     *<host>127.0.0.1</host>
     *</ipv4>
     *</address>
     *</server>
     *<server>
     *<id>rad2</id>
     *<address>
     *<ipv4>
     *<host>127.0.0.1</host>
     *<auth-port>1212</auth-port>
     *<acct-port>1313</acct-port>
     *</ipv4>
     *</address>
     *</server>
    </radius>
    SH-PROMPT:
    """
    ~xmlstarlet sel -N ios=urn:ios -t -m '//ios:group/ios:server' -c . -n $states_dir/rad2.state.xml
    !| xmllint --format -
    """?
    <?xml version=.*?>
    <server xmlns=.*>
     *<radius>
     *<name>rad1</name>
     *</radius>
    </server>
    SH-PROMPT:
    """
    ~xmlstarlet sel -N ios=urn:ios -t -m '//ios:radius[ios:server]' -c . -n $states_dir/rad2.state.xml
    !| xmllint --format -
    """?
    <?xml version=.*?>
    <radius xmlns="urn:ios">
     *<server>
     *<id>rad1</id>
     *<address>
     *<ipv4>
     *<host>127.0.0.1</host>
     *</ipv4>
     *</address>
     *</server>
    </radius>
    SH-PROMPT:
    """
[shell ncs-cli]
    !drned-xmnr state import-convert-cli-files file-path-pattern ../cfgs/short-rad2*.cfg
    -
    ?failure States already exist: short-rad2:[12]
    !drned-xmnr state import-convert-cli-files file-path-pattern ../cfgs/short-rad2*.cfg overwrite true
    [timeout 20]
    -failure
    ???success Imported states: short-rad2:1, short-rad2:2
    [timeout]

    !drned-xmnr state delete-state state-name-pattern *
    !drned-xmnr state import-convert-cli-files file-path-pattern ../cfgs/*rad*.cfg
    [timeout 10]
    ?importing state short-rad1:1
    [timeout]
    ~$_CTRL_C_
    ?Aborted: by user
    !do show devices device cisco-nc0 drned-xmnr state states
    """?
    STATE *DISABLED *
    -----* *
    rad1 *- *
    rad2 *- *

    admin@ncs.*
    """
    !drned-xmnr state disable-state state-name rad1
    !do show devices device cisco-nc0 drned-xmnr state states 
    """?
    STATE *DISABLED *
    -----* *
    rad1 *X *
    rad2 *- *

    admin@ncs.*
    """

    [progress auth failure message]
[shell os]
    # force the password to be "nimda" in the "broken" driver
    !sed 's/self.password = .*/self.password = "nimda"/' $driver > $broken
    [invoke shell-check]
[shell ncs-cli]
    !drned-xmnr driver $broken
    !commit
    [timeout 20]
    !drned-xmnr state import-convert-cli-files file-path-pattern ../cfgs/rad1.cfg overwrite true
    ?Failed to authenticate to the device CLI


[cleanup]
    !ncs_cli -u admin -C
    ???admin@ncs#
    !config
    !devices device cisco-nc0 drned-xmnr driver $driver
    !commit
    ?Commit complete|No modifications
    !end
    !exit
    ?SH-PROMPT:
    !rm -f $broken
    ?SH-PROMPT:
    [invoke cleanup]
