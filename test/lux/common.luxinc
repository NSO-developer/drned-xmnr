[config timeout=2000]

[global xmnr_dir_rel=xmnr-run-dir]
[global xmnr_dir_abs=/tmp/xmnr]
# relative_paths should be true of false
[config require=relative_paths]

[macro set-xmnr-dir]
    !printf "dir: >%s<\n" $$($relative_paths && echo $xmnr_dir_rel || echo $xmnr_dir_abs)
    ?dir: >(.*xmnr.*)<$
    [global xmnr_dir=$1]
[endmacro]

[macro shell-check]
    [invoke shell-check-prompt check]
[endmacro]

[macro shell-check-prompt prompt]
    !echo $prompt: ==$?==
    ?$prompt: ==0==
[endmacro]

[macro prepare-xmnr]
[shell os]
    [invoke set-xmnr-dir]
[shell ncs-cli]
    !ncs_cli -u admin -C
    ???admin@ncs#
    !complete-on-space false
    !config
    !python-vm logging level level-debug
    !drned-xmnr xmnr-log-file output.log
    !drned-xmnr xmnr-directory $xmnr_dir
    !commit
    ?Commit complete|No modifications.
[endmacro]

[macro ned-test-setup]
    !rm -rf $xmnr_dir_rel $xmnr_dir_abs
    !rm -rf ncs-run
    [progress prepare ncs-run and packages]
    !ncs-project create ncs-run
    [invoke shell-check-prompt create]
    !cd ncs-run/packages
    [invoke shell-check]
    !ln -s ../../../../ drned-xmnr
    !file drned-xmnr
    ?drned-xmnr: symbolic link to .*
    !file drned-xmnr/python
    ?drned-xmnr/python: directory
    !make -C drned-xmnr/src all
    [invoke shell-check-prompt make-xmnr]
[endmacro]

[macro setup-and-prepare]
    # set things up and start the simple ned
[shell os]
    [invoke ned-test-setup]
    !ncs-make-package --no-java --netconf-ned ../../base-ned ned
    [invoke shell-check-prompt make-package]
    [timeout 10]
    !make -C ned/src all
    [invoke shell-check-prompt make-ned]
    [timeout]
    !cd ..
    [invoke start-ncs-netsim ned]
[shell ncs-cli]
    [invoke prepare-ncs ned0]
    [invoke prepare-device-xmnr true]
[endmacro]


[macro start-ncs-netsim device]
    [progress create and start the netsim]
    !ncs-netsim delete-network
    !ncs-netsim create-network packages/$device 1 $device
    [invoke shell-check-prompt create-network]
    !ncs-netsim start
    [invoke shell-check-prompt netsim]
    [progress start ncs]
    [timeout 10]
    !ncs --stop; ncs
    [invoke shell-check-prompt ncs]
    [timeout]
    [invoke prepare-xmnr]
[endmacro]

[macro test-walk-states states]
    [progress walk states]
    [timeout 15]
    !drned-xmnr transitions walk-states states [ $states ]
    ?Prepare the device
    [loop state $states]
        """?
        Test transition to $state
           load $state
           commit
               (succeeded|\(no modifications\))
           compare config
               succeeded
        """
    [endloop]
    """?
    Device cleanup
       load before-session
       commit
           (succeeded|\(no modifications\))
       compare config
           succeeded
    success Completed successfully
    """
    [timeout]
[endmacro]

[macro prepare-test device]
    [invoke prepare-ncs $device]
    [invoke prepare-device-xmnr false]
[endmacro]

[macro prepare-ncs device]
    [invoke prepare-ncs-tweak $device cat $device]
[endmacro]

[macro prepare-ncs-tweak device tweak tweak_device]
[shell os]
    !ncs_cmd -u admin -c 'mdel /devices/device{$tweak_device}'
    !ncs-netsim ncs-xml-init $device | $tweak | ncs_load -F p -l -m
    [invoke shell-check-prompt xml-init]
[shell ncs-cli]
    !devices device $tweak_device
    !sync-from
[endmacro]

[macro prepare-device-xmnr queues]
    [progress setup xmnr]
    [timeout 10]
    !drned-xmnr setup setup-xmnr overwrite true use-commit-queue $queues
    ???success XMNR set up
    [timeout]
    [progress record states]
    !drned-xmnr state record-state state-name empty overwrite true
    ???success Recorded state
[endmacro]

[macro cleanup]
    !ncs --stop
    ?SH-PROMPT:
    !ncs-netsim --dir ncs-run/netsim stop
    ?SH-PROMPT:
[endmacro]
