module drned-xmnr {
  namespace "http://cisco.com/ns/drned-xmnr";
  prefix drned-xmnr;

  import tailf-common {
    prefix tailf;
  }
  import tailf-ncs {
    prefix ncs;
  }

  description "A Doctor's bag of tools for examining & diagnosing your NSO NEDs";

  grouping action-output-common {
    leaf error {
      type string;
    }
    leaf success {
      type string;
    }
    leaf failure {
      type string;
    }
  }

  grouping states-input {
    leaf-list states {
      tailf:info
        "List of states to pass through (in given order); if empty,
         all states in random order are used.";
      ordered-by user;
      type string;
    }
    container stop-after {
      tailf:info "Do not start more transitions after given time/coverage has been reached.";
      choice unit-selection {
        leaf seconds { type uint64; }
        leaf minutes { type uint64; }
        leaf hours   { type uint64; }
        leaf days    { type uint64; }
        leaf percent { type uint64; }
        leaf cases   { type uint64; }
      }
    }
  }
  container drned-xmnr {
    leaf drned-directory {
      tailf:info "DrNED installation directory; if unset, environment variable is used";
      type string;
    }
    leaf xmnr-directory {
      tailf:info "Directory where XMNR data is stored";
      type string;
      default "/tmp/xmnr";
    }
    leaf xmnr-log-file {
      tailf:info
        "If set, all output is stored to that file (relative to
         xmnr-directory).  Useful especially if actions are not run
         from the CLI.";
      type string;
    }
  }

  augment /ncs:devices/ncs:device {
    container drned-xmnr {
      container setup {
        tailf:action setup-xmnr {
          tailf:info
            "Set up XMNR working directory, including setting up
             the DRNED subdirectory";
          tailf:actionpoint drned-xmnr;
          input {
            leaf overwrite {
              tailf:info "Overwrite existing data in the target directory.";
              type boolean;
              default false;
            }
          }
          output {
            uses action-output-common;
          }
        }
      }
      container state {
        tailf:action record-state {
          tailf:info "Save the current device configuration state in a file. "+
            "A collection of saved state files can later be used with the "+
            "'transitions explore-transitions' command.";
          tailf:actionpoint drned-xmnr;
          input {
            leaf state-name {
              mandatory true;
              type string;
            }
            leaf including-rollbacks {
              type uint32 {
                range 0..25;
              }
              default 0;
            }
          }
          output {
            uses action-output-common;
            leaf state-name {
              type string;
            }
          }
        }
        tailf:action delete-state {
          tailf:info "Delete a saved state file. ";
          tailf:actionpoint drned-xmnr;
          input {
            leaf state-name {
              mandatory true;
              type string;
            }
          }
          output {
            uses action-output-common;
          }
        }
        tailf:action list-states {
          tailf:info "List the saved states for this device.";
          tailf:actionpoint drned-xmnr;
          input {
          }
          output {
            uses action-output-common;
          }
        }
        tailf:action import-state-files {
          tailf:info "Convert a configuration file or files to a XMNR state file.";
          tailf:actionpoint drned-xmnr;
          input {
            leaf file-path-pattern {
              type string;
              mandatory true;
            }
            leaf overwrite {
              type boolean;
              default false;
            }
          }
          output {
            uses action-output-common;
          }
        }
      }
      container transitions {
        tailf:action transition-to-state {
          tailf:actionpoint drned-xmnr;
          input {
            leaf state-name {
              type string;
            }
            leaf rollback {
              tailf:info "If true, let DrNED do rollback to the original state";
              type boolean;
              default false;
            }
          }
          output {
            uses action-output-common;
          }
        }
        tailf:action explore-transitions {
          tailf:actionpoint drned-xmnr;
          input {
            uses states-input;
          }
          output {
            uses action-output-common;
          }
        }
        tailf:action walk-states {
          tailf:info "Go through all states one after another.";
          tailf:actionpoint drned-xmnr;
          input {
            uses states-input;
          }
          output {
            uses action-output-common;
          }
        }
      }
      container coverage {
        tailf:action reset {
          tailf:info "Reset DrNED coverage data.";
          tailf:actionpoint drned-xmnr;
          output {
            uses action-output-common;
          }
        }
        tailf:action collect {
          tailf:info "Collect DrNED coverage status.";
          tailf:actionpoint drned-xmnr;
          input {
            leaf-list yang-patterns {
              tailf:info
                "Pattern of YANG modules to be used for coverage
                 status.  If empty, the device source YANG modules are
                 used.";
              type string;
            }
          }
          output {
            uses action-output-common;
          }
        }
        container data {
          config false;
          tailf:callpoint coverage-data;
          
          leaf nodes-total {
            type uint32;
          }
          leaf lists-total {
            type uint32;
          }
          grouping node-coverage {
            container read-or-set {
              uses coverage;
            }
            container set {
              uses coverage;
            }
            container deleted {
              uses coverage;
            }
            container set-set {
              uses coverage;
            }
            container deleted-separately {
              uses coverage;
            }
          }
          grouping coverage {
            leaf total {
              type int32;
            }
            leaf percent {
              type int8;
            }
          }
          container percents {
            container nodes {
              uses node-coverage;
            }
            container lists {
              container read-or-set {
                uses coverage;
              }
              container deleted {
                uses coverage;
              }
              container multi-read-or-set {
                uses coverage;
              }
            }
            container grouping-nodes {
              uses node-coverage;
            }
          }
        }
      }
    }
  }
}
